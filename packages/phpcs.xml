<?xml version="1.0"?>
<ruleset
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:noNamespaceSchemaLocation="../vendor/squizlabs/php_codesniffer/phpcs.xsd"
    name="WordPress Theme Coding Standards">
	<!-- See https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-ruleset.xml -->
	<!-- See https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards -->
	<!-- See https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/wiki -->
	<!-- See https://github.com/wimg/PHPCompatibility -->

	<!-- Set a description for this ruleset. -->
	<description>A custom set of code standard rules to check for WordPress themes.</description>


	<!--
	#############################################################################
	COMMAND LINE ARGUMENTS
	https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-ruleset.xml
	#############################################################################
	-->

	<!-- Pass some flags to PHPCS:
		 p flag: Show progress of the run.
		 s flag: Show sniff codes in all reports.
	-->
	<arg value="ps"/>

	<!-- Strip the filepaths down to the relevant bit. -->
	<arg name="basepath" value="./"/>

	<!-- Check up to 8 files simultanously. -->
	<arg name="parallel" value="8"/>

	<!-- Only check the PHP files. SCSS and JS files are checked separately. -->
	<arg name="extensions" value="php"/>

	<!-- Check all files in this directory and the directories below it. -->
	<file>.</file>

    <exclude-pattern>*/.git/*</exclude-pattern>
	<exclude-pattern>*/node_modules/*</exclude-pattern>
	<exclude-pattern>*/vendor/*</exclude-pattern>
	<exclude-pattern>*\.old/*</exclude-pattern>


	<!--
	#############################################################################
	USE THE PHPCOMPATIBILITY RULESET

	This checks code for PHP cross-version compatibility.
	See: https://github.com/PHPCompatibility/PHPCompatibility
	#############################################################################
	-->

	<rule ref="PHPCompatibility">
		<!-- Only scan PHP files for PHP compatibility. -->
		<include-pattern>*\.php$</include-pattern>

		<!-- Polyfill package is included with WP-CLI, so available to all projects. -->
		<exclude name="PHPCompatibility.FunctionUse.NewFunctions.array_columnFound"/>
	</rule>

	<!--
	#############################################################################
	USE THE WORDPRESS-EXTRA RULESET

	This checks code against the WordPress Core code style requirements, as well as
	a number of modern PHP style rules and other best practices which are
	currently not yet covered in the Core style handbook.
	See: https://make.wordpress.org/core/handbook/best-practices/coding-standards/
	See: https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
	#############################################################################
	-->

	<rule ref="WordPress-Extra">

		<!-- No need for this sniff as the parallel linter command takes care of linting. -->
		<exclude name="Generic.PHP.Syntax"/>

		<!-- To make autoloading easier, PSR-4 is mostly adhered to for file naming. -->
		<exclude name="WordPress.Files.FileName"/>

		<!-- Output is sent to cli, not to HTML, so this sniff is not applicable to WP-CLI.
			 Note: some output escaping may still be needed/beneficial, however this would probably
			 require a custom sniff. -->
		<exclude name="WordPress.Security.EscapeOutput"/>

		<!-- WP-CLI is intended as a developer tool, so using development functions should be fine. -->
		<exclude name="WordPress.PHP.DevelopmentFunctions"/>

		<!-- Make some allowance for the fact that the code will be run in a command-line environment. -->
		<exclude name="Generic.PHP.BacktickOperator"/>

		<!-- We want to stick with short array syntax for WP-CLI. -->
		<exclude name="Universal.Arrays.DisallowShortArraySyntax.Found"/>

		<!-- Keep short ternaries around for WP-CLI. -->
		<exclude name="Universal.Operators.DisallowShortTernary.Found"/>

		<!-- Allow filesystem operations because WordPress APIs may not be available -->
		<exclude name="WordPress.WP.AlternativeFunctions.file_system_operations_file_put_contents" />
		<exclude name="WordPress.WP.AlternativeFunctions.file_system_operations_mkdir" />
		<exclude name="WordPress.WP.AlternativeFunctions.file_system_operations_rmdir" />
		<exclude name="WordPress.WP.AlternativeFunctions.rename_rename" />
		<exclude name="WordPress.WP.AlternativeFunctions.unlink_unlink" />

	</rule>


	<!--
	#############################################################################
	USE THE PHPCompatibility RULESET
	#############################################################################
	-->


	<config name="testVersion" value="7.1-99.0"/>
	<rule ref="PHPCompatibility">
		<!-- Whitelist PHP native classes, interfaces, functions and constants which
			 are back-filled by WP.

			 Based on:
			 * /wp-includes/compat.php
			 * /wp-includes/random_compat/random.php
		-->
		<exclude name="PHPCompatibility.PHP.NewClasses.errorFound"/>
		<exclude name="PHPCompatibility.PHP.NewClasses.typeerrorFound"/>

		<exclude name="PHPCompatibility.PHP.NewConstants.json_pretty_printFound"/>
		<exclude name="PHPCompatibility.PHP.NewConstants.php_version_idFound"/>

		<exclude name="PHPCompatibility.PHP.NewFunctions.hash_equalsFound"/>
		<exclude name="PHPCompatibility.PHP.NewFunctions.json_last_error_msgFound"/>
		<exclude name="PHPCompatibility.PHP.NewFunctions.random_intFound"/>
		<exclude name="PHPCompatibility.PHP.NewFunctions.random_bytesFound"/>
		<exclude name="PHPCompatibility.PHP.NewFunctions.array_replace_recursiveFound"/>

		<exclude name="PHPCompatibility.PHP.NewInterfaces.jsonserializableFound"/>

		<exclude name="PHPCompatibility.FunctionDeclarations.NewClosure.ThisFoundOutsideClass"/>
	</rule>

</ruleset>
